#!/bin/bash


pathadd() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="$1${PATH:+":$PATH"}"
    fi
}


lsf() {
    if [ "$1" = "-i" ]
    then
        shift
        find "${2:-.}" -iname "*$1*" 2>/dev/null | grep -i "$1"
    else
        find "${2:-.}" -name "*$1*" 2>/dev/null | grep "$1"
    fi
}

psg() {
    ps aux | grep "$(echo $1 | sed 's/./[\0]/')"
}

ds() {
    echo "$(du -had 1 -t 1M "${1:-.}" 2>/dev/null | sort -h)"
}

gi() {
    git ${1:1} ${@:2}
}

pane_id() {
    tmux display-message -pt "${TMUX_PANE:?}" '#{pane_index}'
}

run() {
    if [ -e "main.py" ]; then
        python main.py ${@:1}
    elif [ -e "Makefile" ]; then
        make && [ -e "main" ] && ./main ${@:1}
    elif [ -e "main" ]; then
        ./main ${@:1}
    else
        echo "No main.py or Makefile to execute !"
    fi
}

ot() {
    mkdir ~/Pytest 2> /dev/null
    tmux new-window -n Pytest -c ~/Pytest
    tmux split-window -c ~/Pytest
    tmux select-pane -U
    tmux unbind -n M-g
    tmux bind -n M-g selectp -t 1 \\\; send-keys Escape :w Enter \\\; selectp -t 2 \\\; send-keys "py test.py" Enter \\\; selectp -t 1
    tmux send-keys "vim test.py" Enter
}

ct() {
    rm -r ~/Pytest 2> /dev/null
    tmux kill-window
    clear
}

pip_update() {
    pip3 list -o | cut -d ' ' -f 1 | tail -n +3 > /tmp/pip_list
    [[ $? == 1 ]] && return 1

    # If a pip update is available, start with it
    if grep -q "^pip$" /tmp/pip_list
    then
        cat <(echo pip) <(sed "/^pip$/d" /tmp/pip_list) > /tmp/pip_list.tmp
        mv /tmp/pip_list.tmp /tmp/pip_list
    fi

    # Remove the packages in pip_exclude file
    if [ ! "$1" = "-a" -a ! "$1" = '--all' ] && [ -s ~/.config/pip/pip_exclude ]
    then
        grep -v -f <(sed -e "/^\s*#.*$/d" -e "/^\s*$/d" ~/.config/pip/pip_exclude) /tmp/pip_list > /tmp/pip_list.tmp
        mv /tmp/pip_list.tmp /tmp/pip_list
    fi

    local exit_code=0
    if [ -s /tmp/pip_list ]
    then
        vim /tmp/pip_list
        cat /tmp/pip_list | xargs -n 1 pip3 install -U
        exit_code=$?
    fi
    rm /tmp/pip_list
    return $exit_code
}

ls_stack() {
    [[ $# != 1 ]] && echo "Usage: ls_stack {cmd}" && return 1

    local arg=""
    if [ "$(type -t "$1")" == "alias" ]
    then
        arg=$(alias "$1")
        arg="${arg#*\'}"
        arg="${arg::-1}"
        local first_cmd="${arg%% *}"

        # If sudo as first cmd, ignore it and take second cmd
        if [ "$first_cmd" == "sudo" ] && [ "$arg" != "sudo" ]
        then
            first_cmd="${arg#sudo }"
            first_cmd="${first_cmd%% *}"
        fi

        echo -ne "\e[38;5;9malias${RESET} $1 = '$arg'"
        [ -n "$(which $first_cmd)" ] && echo -ne " -> \e[1;32m$(which $first_cmd)${RESET}"
        echo
        arg="$first_cmd"
    else
        arg="$1"
    fi

    if [ -e "$arg" ]
    then
        local file="$arg"
    elif which "$arg" &>/dev/null
    then
        local file=$(which "$arg")
    else
        if command -v "$arg" > /dev/null
        then
            echo "$(type $arg)"
        else
            echo "Arg '$arg' is not an alias nor an executable"
        fi
        return 1
    fi
    local base_dir="$(dirname "$file")"

    local files=( "$file" )
    local line=$(ls -lh "$file")
    while [[ $line == *"->"* ]]
    do
        file=$(echo "$line" | rev | cut -d' ' -f1 | rev)
        [[ $file == /* ]] || file="$(realpath -s "$base_dir/$file")"

        files+=( "$file" )
        [ ! -h "$file" ] && break

        base_dir="$(dirname "$file")"
        line=$(ls -lh "$file")
    done

    ls -flh --color=force ${files[@]}
}

