" {{{1 DEFAULTS.VIM
" Use Vim settings, rather than Vi
set nocompatible

set backspace=indent,eol,start      " Allow backspacing over everything in insert mode

set history=1000	        " keep 1000 lines of command line history
set ruler                   " show the cursor position all the time
set showcmd	                " display incomplete commands
set wildmenu		        " display completion matches in a status line

set ttimeout		        " time out for key codes
set ttimeoutlen=50	        " wait up to 100ms after Esc for special key

set display+=lastline

set scrolloff=3             " show a few lines of context around the cursor
set sidescrolloff=5

set incsearch               " do incremental searching
set nrformats-=octal        " do not recognize octal numbers for Ctrl-A and Ctrl-X

" CTRL-U only deletes entered character and not always the whole line: fix that
" Use CTRL-G u to first break undo, so that you can undo CTRL-U after inserting a line break
inoremap <C-U> <C-G>u<C-\><C-O>d0

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
    syntax enable
endif


if has("autocmd")
    " Enable file type detection.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    augroup vimrcEx
        autocmd!

        " When editing a file, always jump to the last known cursor position.
        autocmd BufReadPost *
            \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
            \ |   exe "normal! g`\""
            \ | endif
    augroup END
endif

" Prevent that the langmap option applies to characters that result from a mapping
if has('langmap') && exists('+langnoremap')
    set langnoremap
endif


" {{{1 GENERAL OPTIONS

let mapleader = ","
let maplocalleader = ","

set formatoptions+=j    " delete comment character when joining commented lines
set autoread

set shortmess+=I        " don't display message when running vim without file

" Replace patterns act on every occurence in line by default
" (and use g-flag to use default behavior)
set gdefault

set wildmode=longest:full,full   " when tabing, complete the longest, then disp list
set wildcharm=<C-z>              " autocompletion character in macros

set ignorecase
set smartcase           " case-sensitive search only when at least one capital letter

set path+=**            " set recursive path to use :find

set splitright          " new splits on the right...
set splitbelow          " ... and below

" Also set help by default in vertical split
cabbrev <expr> h ((getcmdtype() == ':' && getcmdpos() <= 2)? 'vert h' : 'h')
cabbrev <expr> help ((getcmdtype() == ':' && getcmdpos() <= 5)? 'vert help' : 'help')

set expandtab
set smarttab

set shiftwidth=4
set tabstop=4
set shiftround

set autoindent
set smartindent

set linebreak           " break line between words during wrap
set lazyredraw          " don't update screen during macros

set foldlevelstart=0
set foldmethod=syntax

set notagrelative       " cf plugin/hidden_tags.vim
set switchbuf=usetab    " jump to the first tab that contains buffer for quickfix commands

set viewoptions-=options        " To omit local options when restoring file (cf. mkview, loadview)
set sessionoptions-=buffers
set sessionoptions-=folds
set sessionoptions-=options     " To restore syntax highlighting when restoring session (unzoom)
set sessionoptions-=winsize

set bufhidden=delete    " To delete buffer instead of just unloading them

set nojoinspaces        " Only add a single space when `J`oining two lines, even if it ends with '.'

set complete-=i                 " Remove include completion (too slow)
set completeopt+=longest        " Only insert longest common text in autocompletion

let g:is_bash = 1       " Set bash syntax instead of sh

if has("autocmd")
    augroup dashKeyword
        autocmd!

        " Add - to word limit in text, markdown and bash files
        autocmd FileType text,markdown,sh,bib,tex setlocal iskeyword+=\-
    augroup END
endif

if has('mouse')
    set mouse=a
endif

set backup
set undofile

set backupdir=$HOME/.cache/vim/backup//,/tmp//    | call mkdir(&backupdir, 'p', 0700)
set directory=$HOME/.cache/vim/swap//,/tmp//      | call mkdir(&directory, 'p', 0700)
set viewdir=$HOME/.cache/vim/view                 | call mkdir(&viewdir, 'p', 0700)
set undodir=$HOME/.cache/vim/undo//,/tmp//        | call mkdir(&undodir, 'p', 0700)
set spellfile=$HOME/.cache/vim/spell/en.utf-8.add | call mkdir($HOME."/.cache/vim/spell", 'p', 0700)
let g:netrw_home=$HOME . "/.cache/vim/"

set viminfo+='1000,n$HOME/.cache/vim/viminfo

set dictionary+=/usr/share/dict/words

colorscheme molokai
filetype detect


" {{{1 ADDITIONAL PACKAGES

try
    packadd matchit
catch /.*/
endtry


" Ansi-Esc
let g:no_cecutil_maps = 1
let g:no_ansiesc_menu = 1


" Auto-pairs
let g:autopairs_shortcut_toggle = ''
let g:autopairs_shortcut_jump = '<M-v>'
let g:autopairs_shortcut_back_insert = '<M-c>'
let g:autopairs_center_line = 0


" GitGutter
set updatetime=100
let g:gitgutter_enabled = 0
let g:gitgutter_highlight_lines = 1
let g:gitgutter_preview_win_floating = 1

nnoremap <silent> <leader>g :GitGutterToggle \| echo "GitGutter " . (g:gitgutter_enabled ? "enabled" : "disabled")<CR>
nmap [h <Plug>(GitGutterPrevHunk)
nmap ]h <Plug>(GitGutterNextHunk)

xnoremap <Plug>(GitGutterStageNextHunk) :execute "normal \<Plug>(GitGutterStageHunk)\<Plug>(GitGutterNextHunk)" \| silent! call repeat#set("\<lt>Plug>(GitGutterStageNextHunk)")<CR>
nnoremap <Plug>(GitGutterStageNextHunk) :execute "normal \<Plug>(GitGutterStageHunk)\<Plug>(GitGutterNextHunk)" \| silent! call repeat#set("\<lt>Plug>(GitGutterStageNextHunk)")<CR>
xmap ,hs <Plug>(GitGutterStageNextHunk)
nmap ,hs <Plug>(GitGutterStageNextHunk)
xmap ,hS <Plug>(GitGutterStageHunk)
nmap ,hS <Plug>(GitGutterStageHunk)

highlight GitGutterStatuslineAdd    ctermfg=2 ctermbg=238
highlight GitGutterStatuslineChange ctermfg=3 ctermbg=238
highlight GitGutterStatuslineDelete ctermfg=1 ctermbg=238

highlight GitGutterStatuslineAddNC    cterm=bold ctermfg=2 ctermbg=244
highlight GitGutterStatuslineChangeNC cterm=bold ctermfg=3 ctermbg=244
highlight GitGutterStatuslineDeleteNC cterm=bold ctermfg=1 ctermbg=244

let g:fastfold_minlines = 10


" Markdown
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_folding_style_pythonic = 1


" Qf
nmap <leader>ak <Plug>(qf_qf_previous) \| <Plug>(qf_loc_previous)
nmap <leader>aj <Plug>(qf_qf_next) \| <Plug>(qf_loc_next)
nmap <leader>as <Plug>(qf_qf_switch)
function s:ToggleQfOrLoc()
    if !empty(getqflist())
        return "\<Plug>(qf_qf_toggle)"
    elseif !empty(getloclist(0))
        return "\<Plug>(qf_loc_toggle)"
    endif
    return ""
endfunction
nmap <expr> <leader>aa <SID>ToggleQfOrLoc()

nnoremap <expr> [s (&spell ? "[s" : "\<Plug>(qf_qf_previous) \| \<Plug>(qf_loc_previous)")
nnoremap <expr> ]s (&spell ? "]s" : "\<Plug>(qf_qf_next) \| \<Plug>(qf_loc_next)")


" Readline
let g:readline_ctrl_t = 0


" Tagbar
let g:tagbar_position = 'topleft vertical'
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_jump_offset = 100
augroup tagbarMap
    autocmd!

    autocmd BufEnter * if &ft != "markdown" | nnoremap <buffer> <leader>c :TagbarOpen j<CR> | endif
augroup END


" Vim/Tmux navigator
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_disable_when_zoomed = 1
nnoremap <silent> <M-h> :TmuxNavigateLeft<CR>
nnoremap <silent> <M-j> :TmuxNavigateDown<CR>
nnoremap <silent> <M-k> :TmuxNavigateUp<CR>
nnoremap <silent> <M-l> :TmuxNavigateRight<CR>

inoremap <silent> <M-h> <Esc>:TmuxNavigateLeft<CR>
inoremap <silent> <M-j> <Esc>:TmuxNavigateDown<CR>
inoremap <silent> <M-k> <Esc>:TmuxNavigateUp<CR>
inoremap <silent> <M-l> <Esc>:TmuxNavigateRight<CR>


" Vimtex
let g:vimtex_fold_enabled = 1
let g:vimtex_compiler_latexmk = {'continuous': 0}
let g:vimtex_quickfix_ignore_filters = ['Underfull', 'Overfull', 'Font Warning']
augroup vimtexSingleCompile
    autocmd!

    autocmd FileType tex nmap <localleader>ll <Plug>(vimtex-compile-ss)
augroup END


" Zoom pane
let g:zoom#statustext = '[Z]'
nmap <leader>z <Plug>(zoom-toggle)


" {{{1 USER MAPPINGS

" Edit and reload vim config
nnoremap <leader>e :call <SID>OpenInSplitIfNotEmpty($MYVIMRC)<CR>
nnoremap <leader>E :tabnew $MYVIMRC<CR>
nnoremap <leader>r :source $MYVIMRC \| redraw \| echo "Config reloaded !"<CR>

" Write file with <leader>w
nnoremap <leader>w :update <CR>

" Make with <leader>m
nnoremap <leader>m :execute 'silent !clear' \| silent make \| redraw! \| cwindow<CR>

" Split
nnoremap <silent> <leader>\ :vsplit<CR>
nnoremap <silent> <leader><bar> :vsplit \| enew<CR>
nnoremap <silent> <leader>- :split<CR>
nnoremap <silent> <leader>_ :split \| enew<CR>
nnoremap <silent> <leader>= <C-w>=
nnoremap <silent> <leader>q :call <SID>CloseWin()<CR>

" Move splits around
nnoremap <leader>H <C-w>H
nnoremap <leader>J <C-w>J
nnoremap <leader>K <C-w>K
nnoremap <leader>L <C-w>L

" Tabs
nnoremap <silent> <leader>t :tab split<CR>
nnoremap <silent> <leader>T :tabnew<CR>

function s:TabSwitch(count)
    let l:target_tab = (tabpagenr() + a:count - 1) % tabpagenr('$') + 1
    execute "tabnext " . l:target_tab
endfunction
nnoremap <silent> <leader>n :<C-U>call <SID>TabSwitch(v:count1)<CR>
nnoremap <silent> <leader>p :<C-U>call <SID>TabSwitch(tabpagenr('$')-v:count1)<CR>

nnoremap <silent> <leader>0 :$tabnext<CR>
for s:i in range(1, 9)
    execute "nnoremap <silent> <leader>" . s:i . " :" . s:i . "tabnext<CR>"
endfor

function s:TabMove(count)
    let l:target_count = (tabpagenr() + a:count) % (tabpagenr('$') + 1)
    execute "tabmove " . l:target_count
endfunction
nnoremap <silent> <leader>N :<C-U>call <SID>TabMove(v:count1)<CR>
nnoremap <silent> <leader>P :<C-U>call <SID>TabMove(tabpagenr('$')-v:count1)<CR>

function s:JoinWindow()
    let l:str_src_tab = input("Join window from : ")
    let l:src_tab = str2nr(l:str_src_tab)
    if l:src_tab <= 0 || tabpagenr('$') < l:src_tab
        echo "\rCan't find tab : " . l:str_src_tab . "  "
        return
    endif
    if l:src_tab == tabpagenr()
        echo "\rSource and target tabs must be different"
        return
    endif

    " Reopen buffer in a split
    let l:src_win = tabpagewinnr(l:src_tab)
    let l:buff_nr = tabpagebuflist(l:src_tab)[l:src_win-1]
    execute "split #" . l:buff_nr

    " Close window opened in src tab
    let l:win_id = win_getid(l:src_win, l:src_tab)
    call win_execute(l:win_id, "close")
endfunction
nnoremap <silent> <leader>u :<C-U>call <SID>JoinWindow()<CR>

nnoremap <leader>< <C-W>R
nnoremap <leader>> <C-W>r

" Send split to new tab
nnoremap <leader>! <C-W>T

" Scroll with C-[j|k]
nnoremap <C-j> <C-e>
vnoremap <C-j> <C-e>
nnoremap <C-k> <C-y>
vnoremap <C-k> <C-y>

" Exit insert mode with kj
inoremap kj <Esc>l
inoremap Kj <Esc>l
inoremap kJ <Esc>l
inoremap KJ <Esc>l

" Move line
nnoremap <silent> - ddp==
nnoremap <silent><expr> _ line('.') == line('$') \|\| line('.') == 1 ? "ddP==" : "ddkP=="
vnoremap <silent> - :m '>+1<CR>gv=gv
vnoremap <silent> _ :m '<-2<CR>gv=gv

" Add a new line
nnoremap <C-h> o<C-c>

" Swap words
nnoremap <silent> gt "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>/\w\+\_W\+<CR><C-l>:nohlsearch<CR>
nnoremap <silent> gT "_yiw?\w\+\_W\+<CR><C-l>:nohlsearch<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><C-o>

" Unmap Q and K
nnoremap Q <nop>
nnoremap K <nop>

" Y same as D or C
nnoremap Y y$

" Shift-Tab to dedent
inoremap <S-Tab> <C-d>

" Display current fold name
nnoremap <silent> z/ zc:echo foldtextresult(foldclosed('.'))[:&columns-13] \| normal zo<CR>

" Cancel autocomplete but reprint longest match
cmap <C-x> <C-l><C-n><C-p><C-u><C-y><C-z>

" Open autocomplete on next subdirectory
cnoremap <C-o> <Space><BS><C-z>

" Kill all windows except current
nnoremap <silent> <leader>o :only<CR>

" Redraw screen in insert mode
inoremap <C-l> <C-o><C-l>

" Correct last misspelled word
inoremap <silent> <C-k>k <C-G>u<Esc>:call <SID>FixLineSpellError()<CR>`]a<C-G>u

" Quit visual mode with q
vnoremap q <C-c>


" Display word frequency for text-oriented files
augroup freqCount
    autocmd!

    autocmd FileType text,markdown,bib,tex nnoremap <buffer><silent> <leader>f :Freq<CR>
augroup END


" {{{1 UTILITY FUNCTIONS / COMMANDS

" Function to unzoom before close and close both files when in diff mode
function s:CloseWin()
    if get(t:, 'zoomed', 0) | call zoom#toggle() | endif
    quit
    if &diff && tabpagewinnr('.', '$') == 1 | quit | endif
endfunction

" Function to open file in split if buffer not empty
function s:OpenInSplitIfNotEmpty(file)
    if line('$') == 1 && getline(1) == ''
        exec 'e' a:file
    else
        exec 'vsplit' a:file
    end
endfunction

" Function to fix spelling error only on current line
function s:FixLineSpellError()
    let l:lnum = line('.')
    normal! [s
    if l:lnum != line('.') | return | endif
    normal! 1z=
endfunction

function s:DiffToggle()
    if &diff
        windo diffoff
        execute winnr() . 'wincmd w'
        return
    endif

    if tabpagewinnr('.', '$') != 2
        echohl ErrorMsg | echo "Can only diff two files" | echohl None
        return
    endif

    windo diffthis
    execute winnr() . 'wincmd w'
endfunction

" Command to diff if there are two splits on current window
if !exists(":DiffToggle")
    command -bar DiffToggle call <SID>DiffToggle()
endif

function s:OpenHeader()
    let l:file = expand("%")

    " C++ files
    if l:file =~ "\\v.*\\.cpp$"
        let l:header = substitute(l:file, "\.cpp$", ".hpp", "")
        execute "vsplit " . l:header
        cd .
    elseif l:file =~ "\\v.*\\.hpp$"
        let l:source = substitute(l:file, "\.hpp$", ".cpp", "")
        execute "vsplit " . l:source
        cd .
        normal! r

    " C files
    elseif l:file =~ "\\v.*\\.c$"
        let l:header = substitute(l:file, "\.c$", ".h", "")
        execute "vsplit " . l:header
        cd .
    elseif l:file =~ "\\v.*\\.h$"
        let l:source = substitute(l:file, "\.h$", ".c", "")
        execute "vsplit " . l:source
        cd .
        normal! r

    else
        echom "Current file is not a source nor a header"
    endif
endfunction

if !exists(":OpenHeader")
    command -bar OpenHeader call <SID>OpenHeader()
endif

" Command to write read-only file
if !exists(":W")
    command W execute 'silent! write !sudo /usr/bin/tee "%" >/dev/null' <bar> edit!
endif

" Command to format json file
if !exists(":JsonPrettify")
    command JsonPrettify %!/usr/bin/env python -m json.tool
endif


" {{{1 FULLSCREEN HELP

function s:FullscreenHelpIfEmpty()
    silent! wincmd p
    if line('$') == 1 && getline(1) == '' | close | endif
    silent! wincmd p
endfunction

augroup fullscreenHelp
    autocmd!

    autocmd FileType help call <SID>FullscreenHelpIfEmpty()
augroup END


" {{{1 TAB LINE

function TabLine()
    let l:s = ''
    for l:tab in range(1, tabpagenr('$'))
        let l:winnr = tabpagewinnr(l:tab)
        let l:buflist = tabpagebuflist(l:tab)
        let l:bufnr = l:buflist[l:winnr - 1]
        let l:bufname = bufname(l:bufnr)
        let l:bufmodified = getbufvar(l:bufnr, "&mod")
        let l:base_color = (l:tab == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
        let l:nb_color = (l:tab == tabpagenr() ? '%#TabLineNbSel#' : '%#TabLineNb#')

        let l:s .= '%' . l:tab . 'T' . l:base_color
        let l:s .= ' ' . l:nb_color . l:tab . l:base_color . " "
        let l:s .= (l:bufname != '' ? fnamemodify(l:bufname, ':t') : '[No Name]')

        let l:s .= (l:bufmodified ? ' [+]' : ' ')
    endfor

    let l:s .= '%#TabLineFill#'
    return l:s
endfunction

highlight TabLine cterm=underline ctermfg=15 ctermbg=242
highlight TabLineSel cterm=bold
highlight TabLineNbSel cterm=bold ctermfg=Brown
highlight TabLineNb cterm=underline ctermfg=Brown ctermbg=242
highlight TabLineFill ctermfg=Grey

set tabline=%!TabLine()


" {{{1 STATUS LINE

if !exists('g:statusline_git_branch')
    let g:statusline_git_branch = {}
    let g:statusline_git_is_tracked = {}
endif

augroup setStatusline
    autocmd!

    autocmd BufRead,BufEnter * call s:SetStatuslineGit()
    autocmd BufDelete * silent! unlet g:statusline_git_branch[expand("<abuf>")] |
                      \ silent! unlet g:statusline_git_is_tracked[expand("<abuf>")]
augroup END

function s:SetStatuslineGit()
    let l:branch_command = "git -C " . expand("%:h") . " rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'"
    let l:git_branch = system(l:branch_command)
    let l:track_command = "git -C " . expand("%:h") . " ls-files " . expand("%:p:S") . " 2>/dev/null"
    let l:git_tracked = system(l:track_command)

    let g:statusline_git_branch[bufnr()] = (!empty(l:git_branch) ? ' ' . l:git_branch . ' ' : '')
    let g:statusline_git_is_tracked[bufnr()] = !empty(expand("%:p")) && !empty(l:git_tracked)
endfunction

function MyStatusLine()
    let l:curr_bufnr = winbufnr(g:statusline_winid)
    let l:git_branch = get(g:statusline_git_branch, l:curr_bufnr, "")
    let l:is_tracked = get(g:statusline_git_is_tracked, l:curr_bufnr, 0)

    let l:my_statusline  = ''
    if l:is_tracked | let l:my_statusline .= '%#PmenuSel#' . l:git_branch . '%0*' | endif
    let l:my_statusline .= ' %n ➤  %f%m'
    let l:my_statusline .= (get(b:, 'todo_mode', 0) ? '[T]' : '')
    let l:my_statusline .= '%{zoom#statusline()}'

    " Git gutter
    if g:gitgutter_enabled && !empty(l:git_branch) && l:is_tracked
        let [a, m, r] = gitgutter#hunk#summary(l:curr_bufnr)
        let l:inactive = win_id2win(g:statusline_winid) != winnr() ? "NC" : ""
        let l:my_statusline .= ' ['
        let l:my_statusline .= '%#GitGutterStatuslineAdd' . l:inactive . '#+' . a . ' '
        let l:my_statusline .= '%#GitGutterStatuslineChange' . l:inactive . '#~' . m . ' '
        let l:my_statusline .= '%#GitGutterStatuslineDelete' . l:inactive . '#-' . r . '%0*'
        let l:my_statusline .= '] '
    endif

    let l:my_statusline .= '%='
    let l:my_statusline .= '%y %#PmenuSel# %3l/%L %3c| '
    return l:my_statusline
endfunction

set laststatus=2
set statusline=%!MyStatusLine()


" {{{1 FIXES

" Fix Ctrl-Arrow
noremap [1;5D <C-Left>
noremap! [1;5D <C-Left>
noremap [1;5C <C-Right>
noremap! [1;5C <C-Right>

" Fix Alt shortcuts <M-key>
let s:c = 'a'
while s:c <= 'z'
    exec "set <M-" . s:c . ">=\e" . s:c
    exec "imap \e" . s:c . " <M-" . s:c . ">"
    let s:c = nr2char(1+char2nr(s:c))
endwhile

" Toggle paste mode each time pasting from clipboard, and remove it after
" Source : https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

" vim:fdm=marker
